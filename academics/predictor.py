# academics/predictor.py
import joblib
import pandas as pd
import os
from django.conf import settings
from django.db.models import Avg, Sum
from academics.models import BehaviorRecord

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà Django ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
MODEL_PATH = os.path.join(settings.BASE_DIR, 'ai_models', 'student_risk_model.joblib')
MODEL = None
if os.path.exists(MODEL_PATH):
    try:
        MODEL = joblib.load(MODEL_PATH)
        print("AI risk model loaded successfully.")
    except Exception as e:
        print(f"Error loading AI model: {e}")


def predict_student_risk(student):
    """
    ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 1 ‡∏Ñ‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ
    """
    if MODEL is None:
        return "‚ö™Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•"

    try:
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Feature ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô Train
        avg_total_score = student.enrollments.aggregate(avg=Avg('total_score'))['avg'] or 0
        total_behavior_points = BehaviorRecord.objects.filter(
            enrollment__student=student
        ).aggregate(total=Sum('points'))['total'] or 0

        # 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Input
        # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô Train ‡πÄ‡∏õ‡πä‡∏∞‡πÜ
        input_data = pd.DataFrame({
            'avg_score': [avg_total_score],
            'behavior_points': [total_behavior_points]
        })

        # 3. ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
        prediction = MODEL.predict(input_data)

        if prediction[0] == 1:
            return "üî¥ ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á"
        else:
            return "üü¢ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"

    except Exception as e:
        print(f"Error during prediction for student {student.student_id}: {e}")
        return "‚ö™Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"